<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>Theer108.github.io/</title>
   
   <link>http://theer108.github.io/</link>
   <description>Passionate view on Computer Science, IT and nerdy things</description>
   <language>en-uk</language>
   <managingEditor> Łukasz Chrząszcz</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Clean code</title>
	  <link>//clean-code</link>
	  <author>Łukasz Chrząszcz</author>
	  <pubDate>2016-07-03T12:18:00+02:00</pubDate>
	  <guid>//clean-code</guid>
	  <description><![CDATA[
	     <p>Keeping your code clean is almost as crucial as implementing features on time.
Do you remember the times you had to deal with old code, that was created in
rush and with huuuuuuuge technical debt? Well number of FPS (see below :P) was probably high as the sky and what is more
you probably end up doing workaround or another dirty hack to get task done.</p>

<p><img src="assets/images/clean-code/wtfs.jpg" alt="FPS" /></p>

<p>Good news - it doesn’t have to be that way. I had a chance to read a few books
on maintaining clean code and what I can tell you is that you can improve your
skills in minutes with few simple tricks (no. programmers don’t hate me and I 
don’t want to sell you any pills :P).</p>

<p>In this post I’ll describe some easy to use tips and tricks for crafting
better code - they’re really simple and you can start to use them right away!
Trust me… it works!</p>

<h2 id="really-is-it-that-simple">Really? Is it that simple?</h2>

<p>Yup. I want to keep this post short as for the first post ever, so let’s get to it!</p>

<h3 id="use-meaning-names-for-variables">Use meaning names for variables</h3>

<p>First thing is probably obvious, but <strong>use self-explanatory names</strong>. What I mean - 
you shouldn’t use variables like <code class="highlighter-rouge">i</code>, <code class="highlighter-rouge">var1</code>, <code class="highlighter-rouge">o1</code>. Just look at snippet below:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>FLAG = 2
def do_something(x):

    y = filter(lambda z: z.flag == FLAG, x)
    z = map(lambda z: z.name, y)

    for e in z:
        print("Give %s promotion!" % e)
</code></pre>
</div>

<p>And? Do you have any idea about what does this code suppose to do? You probably had to
focus for a while. But if the author spent a few seconds more on this it could look like
this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>GOOD_EMPLOYEE = 2
def do_something(employees):

    good_employees = filter(lambda emp: emp.flag == GOOD_EMPLOYEE, employees)
    good_employees_names = map(lambda emp: emp.name, good_employees)

    for good_employee_name in good_employees_names
        print("Give %s promotion!" % good_employee_name)
</code></pre>
</div>

<p>With just few changes in variable naming we came to the code that is easy to understand.
<strong>Always give variable name describing its content!</strong></p>

<h3 id="useless-variables-wait-what">Useless variables. Wait what!?</h3>

<h3 id="functions--">Functions -</h3>

	  ]]></description>
	</item>


</channel>
</rss>
