<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>Theer108.github.io/</title>
   
   <link>http://theer108.github.io/</link>
   <description>Passionate view on Computer Science, IT and nerdy things</description>
   <language>en-uk</language>
   <managingEditor> Łukasz Chrząszcz</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Clean code - Functions - Part 2</title>
	  <link>//clean-code-functions-part2</link>
	  <author>Łukasz Chrząszcz</author>
	  <pubDate>2016-07-09T11:10:00+02:00</pubDate>
	  <guid>//clean-code-functions-part2</guid>
	  <description><![CDATA[
	     <p>Let’s continue our journey through cleaning dusty functions! Today we’ll talk 
about <strong>constructors, side effects, return values and how to be awesome in general</strong> 
If you haven’t done so, go read <a href="/clean-code-functions">Part 1</a>.</p>

<h2 id="constructors">Constructors</h2>

<p>There couldn’t be a decent summary of readable code without mentioning constructors.
What are they - everybody knows, but what we can do to improve them? … Well… 
<strong>Remove them?</strong></p>

<p>Seriously, problem with constructors is that they don’t have name so it’s hard to 
understand their meaning. For sure it’s obvious for ctor such:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">Point</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{...}</span>
<span class="kd">public</span> <span class="nf">String</span><span class="p">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{...}</span>
</code></pre>
</div>

<p>But consider more <strong>complex examples</strong> - assume you have a class <code class="highlighter-rouge">Employee</code> and every
object of this type has to have a supervisor (don’t care about boss :D). So
first thought is to create one constructor with Employee argument to pass supervisor.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">Employee</span><span class="p">(</span><span class="n">Employee</span> <span class="n">supervisor</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">supervisor</span> <span class="o">=</span> <span class="n">supervisor</span><span class="o">;</span>
<span class="o">}</span> 
</code></pre>
</div>

<p>So far so good, but after a few months you see following code:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">Employee</span> <span class="n">em1</span> <span class="o">=</span> <span class="o">...</span>
<span class="n">Employee</span> <span class="n">em2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Employee</span><span class="o">(</span><span class="n">em1</span><span class="o">);</span>
</code></pre>
</div>

<p>Do you think you’d remember that this em1 is a supervisor of new employee? Probably not.
Solution is to <strong>create a Factory Method instead of constructor</strong>.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="n">Employee</span> <span class="nf">createNewWithSupervisor</span><span class="p">(</span><span class="n">Employee</span> <span class="n">supervisor</span><span class="o">)</span> <span class="o">{...}</span>

<span class="o">...</span>

<span class="n">Employee</span> <span class="n">em1</span> <span class="o">=</span> <span class="o">...</span>
<span class="n">Employee</span> <span class="n">em2</span> <span class="o">=</span> <span class="n">Employee</span><span class="o">.</span><span class="na">createNewWithSupervisor</span><span class="o">(</span><span class="n">em1</span><span class="o">);</span>
</code></pre>
</div>

<p>Now you don’t have to even think what does this code do - <strong>you just know it</strong>!</p>

<h2 id="dont-return-null">Don’t return <em>null</em></h2>

<p>This is a common thing. Personally I’ve made it a lot of such mistakes! It seems like
a good idea - you’re implementing your super ultra mega business logic - <em>oh! If there’s
an error I should do something… well let’s return null, that’ll do!</em></p>

<p><a href="http://www.instantsfun.es/wrong/" target="_blank">WRONG!</a> By doing that, you:</p>

<ol>
  <li>Force user to immediately handle your error</li>
  <li>Prevent yourself from discovering the source of error</li>
</ol>

<p>As for first point - better solution would be to <strong>use exceptions</strong>, so the user can create
more readable code himself.</p>

<p>The second point is more serious, simply because by returning null you have no idea 
what went wrong. What if your function can fail because of two reasons? From the
outside, nobody can tell the difference and choose the best way to fix that.</p>

<p>Additionally - <strong>null doesn’t have a descriptive name</strong>, so it’s easy to introduce
misleading ifs:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>if (gameBoard.getTileState(x, y) == null) {
    ...
}
</code></pre>
</div>

<p>What does this null actually represents? Some kind of neutral state? Maybe clear tile
or something? You have to check the other end of the project for that to know.</p>

<h2 id="side-effects">Side effects</h2>

<p>If you’re programming for a few years, you for sure spent lots of hours hunting this
nasty little bug in your code. At the end you probably shouted something like this:
<em>Oh my god! it’s because this function changes this field and after that… bla bla bla</em>
Sound familiar?</p>

<p>Those are <strong>side effects</strong>. If function changes state of something outside like a field or global
variable (yuk!) this is a side effect.</p>

<p>You probably can’t eliminate them all, as they’re not a bug or something, but for sure you can eliminate a lot of problems with them. Good thing to bear in mind is that you should <strong>avoid them
as much as you can</strong> - instead of creating 5 methods, each changing your object, create 4 methods
calculating/processing something and 1 method changing the state. What is more, remember to <strong>give
this method a proper name!</strong> This way others can understand <em>oh! this method has some side effects</em>.</p>

<p>Bad code example:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">checkUsernameAndPassword</span><span class="p">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">correctPassword</span> <span class="o">=</span> <span class="n">getPassword</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">correctPassword</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">password</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">createSession</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</code></pre>
</div>

<p>Aaaand boom, checkCredentials has a side effect of creating session. You wouldn’t realise that
checking the implementation. Good code example:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">authenticateUser</span><span class="p">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">correctPassword</span> <span class="o">=</span> <span class="n">getPassword</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">correctPassword</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">password</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">createSession</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>   
<span class="o">}</span>
</code></pre>
</div>

<p>Simply by <strong>changing name</strong> you can alarm user that you’ll probably do something more than merely
checking password - you’re creating session!</p>

<h2 id="summary">Summary</h2>

<p>The most crucial points from today are:</p>

<ol>
  <li>Consider replacing complex/not obvious constructors with Factory Methods</li>
  <li>Think twice before returning plain null</li>
  <li>Avoid side effects and explicitly signal them.</li>
</ol>

<p>I hope this comes in handy for you! Let me know what do you think and what are your ways of
maintaining readable code? See you soon!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Clean code - Functions - Part 1</title>
	  <link>//clean-code-functions</link>
	  <author>Łukasz Chrząszcz</author>
	  <pubDate>2016-07-05T20:10:00+02:00</pubDate>
	  <guid>//clean-code-functions</guid>
	  <description><![CDATA[
	     <p>Functions! Good old functions… Your first thought after hearing “readable code”
was probably functions, methods, etc. In fact you were right. Those little things
dividing our code into reusable blocks are the most crucial when it comes to cleaning
codebase.</p>

<p>But let’s get back to the beginning - how was it in good old DOS Age? Your application
was simply set of commands with some simple loops, gotos (kill it kill it kill it!), etc.
After that smart people introduced functions to cleverly divide your code to reusable blocks
and enabling you to name them. Now that’s a real thing! - <strong>name them</strong>. With that in mind
we can move to the first point. To the compilation and beyond!</p>

<p><img src="http://imgs.xkcd.com/comics/goto.png" alt="GoTo" /></p>

<h2 id="proper-naming">Proper naming</h2>

<p>As it may seem obvious - think how many times you returned to your own code and wondered
<em>oh snap! What the hell does this ‘check’ do?</em>. Probably a lot. This is not an easy thing
to come up with a proper name at the beginning, so what I do to help myself in this task
is simply focus on one main thing that function does (by the way - next point shows that 
in fact your methods should do just one task, no more, no less, but we will get to that).</p>

<p>To illustrate that point let consider code below:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">isPasswordCorrect</span><span class="p">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">correctPassword</span> <span class="o">=</span> <span class="n">getPasswordFromDatabase</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">correctPassword</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">updateUserSuccessfulLoginTimestamp</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
        
        <span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">createNewSession</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
        <span class="n">registerSession</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
        
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</code></pre>
</div>

<p>As you see function name is completely wrong here! No one could possibly think that
this will create a session for user and register it somewhere. Everyone would be like
<em>:( :( :( I just wanted to check if password is correct :( :( :(</em>. I admit that this
example looks a bit exaggerated, but actually I spent a loooot of time debugging a bug
that was caused by Wicket sessions.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">getSessionForUser</span><span class="o">(</span><span class="n">username</span><span class="o">);</span> <span class="c1">// different user than current one</span>
<span class="n">session</span><span class="o">.</span><span class="na">invalidateNow</span><span class="o">();</span>
</code></pre>
</div>

<p>You might think that this code invalidates session for user <em>username</em>… WROOOOONG!
In fact it extracts session from current thread and invalidates that now. So
user executing this code gets kicked :D Fun!</p>

<p>So to sum up this point - <strong>take extra time</strong> after implementing function to <strong>give it
a proper name</strong>. It won’t cost you much, but you will have a better understanding of what
function does after you implemented it.</p>

<h2 id="keep-functions-small">Keep functions small</h2>

<p>This point is the most important one - functions should be kept as small as possible
and they should be delegated to do one thing only. You may ask - <em>how is that possible?
My application is more complicated than yours n00b</em> Let me explain - what I meant was
that you should make your function do one thing at some given abstraction level.
For example if you need to write something to a file, you could do it that way:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeToFile</span><span class="p">(</span><span class="n">String</span> <span class="n">filepath</span><span class="o">,</span> <span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">getWriter</span><span class="o">(</span><span class="n">filepath</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">writer</span><span class="o">(</span><span class="s">"This will be a file"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">writer</span><span class="o">(</span><span class="s">"Delimiter"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">writer</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">writer</span><span class="o">(</span><span class="s">"That was it"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// lala lala lalala</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre>
</div>

<p>In this case it’s not so bad after all, but consider this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writerToFile</span><span class="p">(</span><span class="n">String</span> <span class="n">filepath</span><span class="o">,</span> <span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">openAndWriteToFile</span><span class="o">(</span><span class="n">filepath</span><span class="o">,</span> <span class="n">content</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// </span>
    <span class="o">}</span>
    
<span class="kd">private</span> <span class="kt">void</span> <span class="nf">openFileAndWriteString</span><span class="p">(</span><span class="n">String</span> <span class="n">filepath</span><span class="o">,</span> <span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="kd">throws</span> <span class="o">...</span> <span class="o">{</span>
    <span class="n">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">getWriter</span><span class="o">(</span><span class="n">filepath</span><span class="o">);</span>
    <span class="n">writeStringToFile</span><span class="o">(</span><span class="n">writer</span><span class="o">,</span> <span class="n">content</span><span class="o">);</span>
    <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kt">void</span> <span class="nf">writeStringToWriter</span><span class="p">(</span><span class="n">BufferedWriter</span> <span class="n">writer</span><span class="o">,</span> <span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">writer</span><span class="o">.</span><span class="na">writer</span><span class="o">(</span><span class="s">"This will be a file"</span><span class="o">);</span>
    <span class="n">writer</span><span class="o">.</span><span class="na">writer</span><span class="o">(</span><span class="s">"Delimiter"</span><span class="o">);</span>
    <span class="n">writer</span><span class="o">.</span><span class="na">writer</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
    <span class="n">writer</span><span class="o">.</span><span class="na">writer</span><span class="o">(</span><span class="s">"That was it"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre>
</div>

<p>Now you have a <strong>beautiful structure</strong> of functiona <strong>each doing it’s own thing</strong> and delegating
job further. If you ever wanted to change a business logic of messages in files - you
just change last function, simple as that. You don’t need to distract yourself with
exception handling or whether the file is opened or not, etc.</p>

<p>Please also notice the way we handled exception above - public method is responsible
for that. It’s a good idea to <strong>extract exception handling to separate method</strong> obligated
to do that one thing. It just looks clean and is amazingly separated from business logic!</p>

<p>My solution to that? <strong>Design one big function</strong> - prototype function lets say - and after it works
more or less the way I want it to, I <strong>divide it to separate functions</strong>. With modern IDEs it’s
fairly simple - with IntelliJ you just select a bunch of lines and press Ctrl+Alt+M, provide
method name, hit enter and receive bacon!</p>

<p><img src="http://vignette3.wikia.nocookie.net/bacon/images/e/e4/Push-button-receive-bacon.png/revision/latest?cb=20110421190452" alt="Bacon" /></p>

<h2 id="summary">Summary</h2>

<p>I don’t want this post to be too long, so I’ll end with just these two points, but there’s
obviously much more to say about increasing readability of functions. I will mention a few 
more in next post. See you soon!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Clean code - Variables</title>
	  <link>//clean-code</link>
	  <author>Łukasz Chrząszcz</author>
	  <pubDate>2016-07-03T12:18:00+02:00</pubDate>
	  <guid>//clean-code</guid>
	  <description><![CDATA[
	     <p>Keeping your code clean is almost as crucial as implementing features on time.
Do you remember the times you had to deal with old code, that was created in
rush and with huuuuuuuge technical debt? Well number of FPS (see below :P)
was probably high as the sky and what is more you probably end up doing workaround
or another dirty hack to get task done.</p>

<p><img src="assets/images/clean-code/wtfs.jpg" alt="FPS" /></p>

<p>Good news - it doesn’t have to be that way. I had a chance to read a few books
on maintaining clean code and what I can tell you is that you can improve your
skills in minutes with few simple tricks (no. programmers don’t hate me and I 
don’t want to sell you any pills :P).</p>

<p>In this post I’ll describe some easy to use tips and tricks when it comes to
variables for crafting better code - they’re really simple and you can start
to use them right away! Trust me… it works!</p>

<h2 id="variables-naming">Variables naming</h2>

<p>Variables is probably the biggest set of names in your application code. So it’s crucial
to name them properly. You probably never wondered you can improve something here,
but from my experience some simple rules can vastly increase your coding skills.
So let’s get started! :D</p>

<h3 id="use-meaning-names-for-variables">Use meaning names for variables</h3>

<p>First thing is probably obvious, but <strong>use self-explanatory names</strong>. What I mean - 
you shouldn’t use variables like <code class="highlighter-rouge">i</code>, <code class="highlighter-rouge">var1</code>, <code class="highlighter-rouge">o1</code>. Just look at snippet below:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>FLAG = 2
def do_something(x):

    y = filter(lambda z: z.flag == FLAG, x)
    z = map(lambda z: z.name, y)

    for e in z:
        print("Give %s promotion!" % e)
</code></pre>
</div>

<p>And? Do you have any idea about what does this code suppose to do? You probably had to
focus for a while. But if the author spent a few seconds more on this it could look like
this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>GOOD_EMPLOYEE = 2
def do_something(employees):

    good_employees = filter(lambda emp: emp.flag == GOOD_EMPLOYEE, employees)
    good_employees_names = map(lambda emp: emp.name, good_employees)

    for good_employee_name in good_employees_names
        print("Give %s promotion!" % good_employee_name)
</code></pre>
</div>

<p>With just few changes in variable naming we came to the code that is easy to understand.
<strong>Always give variable name describing its content!</strong> There are some exceptions - as you
saw in lambdas above or in some cases in loops, but if you ever catch yourself wondering
what does this <code class="highlighter-rouge">c</code> means - <strong>change it</strong>.</p>

<p>Friend of mine once told me a golden rule for 
variable naming - <strong>The bigger scope of variable is, the more descriptive the name should
be</strong>. So in case of variables in lambdas or one-line loops - you might consider names like <code class="highlighter-rouge">c</code>,
<code class="highlighter-rouge">i</code>, etc. but for function local variables or fields you should use really intuitive names.</p>

<h3 id="useless-variables-wait-what">Useless variables. Wait what!?</h3>

<p>That one really improved my coding skills by far. Simply <strong>split complex expressions</strong> 
introducing new variables. Let’s consider again snippet from above. One could write it
like that (pardon line length):</p>

<div class="highlighter-rouge"><pre class="highlight"><code>GOOD_EMPLOYEE = 2
def do_something(employees):
    map(lambda s: print ("Give %s promotion!" % s), 
        map(lambda e: e.name, 
            filter(lambda e: e.flag == GOOD_EMPLOYEE, employees)))
</code></pre>
</div>

<p>Really, really unreadible. We all know keeping Python code neat is a good thing, but
not to the point where code is hardly understandable (Personally I could live with such
code, but only after changing function name to describe what the function does - we
will get to that).</p>

<p>I would suggest introducing variables for each part of expressions so as to understand
what they mean. Let’s again look at “good” code from above:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>GOOD_EMPLOYEE = 2
def do_something(employees):

    good_employees = filter(lambda emp: emp.flag == GOOD_EMPLOYEE, employees)
    good_employees_names = map(lambda emp: emp.name, good_employees)

    for good_employee_name in good_employees_names
        print("Give %s promotion!" % good_employee_name)
</code></pre>
</div>

<p>At glance you can understand that we filter all employess to get good employees,
after that we get list with their names and finally we print message to the user.
Simple as that!</p>

<h2 id="units">Units!</h2>

<p>This point is short but crucial. If you ever encounter variable with particular unit,
for example uptime of your application in milliseconds - <strong>use unit in variable name</strong>.</p>

<p>Look at this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>long time;
int purchaseAge;
</code></pre>
</div>

<p>Can you tell if you can add 5 days to <code class="highlighter-rouge">time</code> or 4 years to <code class="highlighter-rouge">purchaseAge</code>? Probably not…</p>

<div class="highlighter-rouge"><pre class="highlight"><code>long timeMilliseconds;
int purchaseAgeDays;
</code></pre>
</div>

<p>And now you can! You don’t have to scan different parts of projects to know what to expect.
You just know that first variables hold milliseconds and second contains number of days.</p>

<h2 id="dont-use-tricky-names">Don’t use tricky names</h2>

<p>If you use simple names it’s easier for anyone to remember, understand and pronounce variables.
Code looks more like a poetic masterpiece than a code. It’s easier to get grasp of <code class="highlighter-rouge">employeeCount</code>, 
<code class="highlighter-rouge">internalState</code> than <code class="highlighter-rouge">emplCnt</code> or <code class="highlighter-rouge">intrinsicStt</code>.</p>

<p>I had an opportunity to work with some scientists on their code and trust me, this point is not so
obvious for everyone :) In every line there were variables like d_hwhx, d_tauprhx, etc. Total nightmare.
So the point is to use <strong>simple, commonly understandable phrases</strong></p>

<h2 id="summary">Summary</h2>

<p>That’s all for this post - it’s just the beginning, so stay tuned and I hope those simple rules 
will enchance your coding skills. I know for most of you they are obvious, but more advanced 
things are yet to come :D See you soon!</p>

	  ]]></description>
	</item>


</channel>
</rss>
