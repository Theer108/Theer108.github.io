<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nerdy Geek - Articles</title>
    <description>Passionate view on Computer Science, IT and nerdy things</description>
    <link>
    https://theer108.github.io/</link>
    
      
      <item>
        <title>Increase productivity in IntelliJ IDEA</title>
        
          <description>&lt;p&gt;Have you ever wondered how to be more efficient while coding? For sure you’re using
some kind of IDE, and while IDEA gets more and more popular it is highly probable that
you’re actually using it already, but do you think you’re using it &lt;strong&gt;the hardcore way&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;If you have a &lt;strong&gt;spare evening&lt;/strong&gt; grab a beer and join me on an adventure! Let’s improve
your productivity!&lt;/p&gt;

&lt;h2 id=&quot;invert-your-thinking&quot;&gt;Invert your thinking&lt;/h2&gt;

&lt;p&gt;If you’re designing a new piece of code then you probably need to introduce new variables classes, field, methods, etc. Problem is that it’s really distracting and at the same time
you probably had to struggle moving around in your editor, creating new class, naming it. Don’t do that, &lt;strong&gt;just write your code first!&lt;/strong&gt; you’ll solve missing references later.&lt;/p&gt;

&lt;p&gt;For example, if you want to use a new class, just write something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now your IDE will probably complain about not knowing the class &lt;em&gt;Application&lt;/em&gt;. &lt;strong&gt;Move your cursor to Application, press Alt+Enter and select “Create class Application”&lt;/strong&gt;. Simple as that and you didn’t touch the mouse. Easy, fast, efficient!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/idea/1.png&quot; alt=&quot;NewClass&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After using shortcut:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/idea/2.png&quot; alt=&quot;NewClass2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lets-generate&quot;&gt;Let’s generate!&lt;/h2&gt;

&lt;p&gt;I have to break it to you - our code is totally NOT unique in biggest part of it, sad but true.
However - if it’s not unique, then maybe we can spare some time writing highly repeatable code?
Let’s get to it!&lt;/p&gt;

&lt;p&gt;Alright! You have your super fast, super clean coded, super newly created class! Have you started
typing the following?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Appl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You guessed it - you don’t need to type constructor by hand - &lt;strong&gt;generate it!&lt;/strong&gt; Place cursor inside Application class and press &lt;em&gt;Alt+Insert&lt;/em&gt; select Constructor and that’s it! :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/idea/3.png&quot; alt=&quot;Constructor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The same way you can generate other things - go play with this menu, try overriding some methods.&lt;/p&gt;

&lt;p&gt;By the way speaking of &lt;em&gt;Alt+Insert&lt;/em&gt; - you can actually altinsert almost &lt;strong&gt;everything everywhere&lt;/strong&gt;. Check what happens if you press it while having focus in project view - try creating some new files :)&lt;/p&gt;

&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;Ok, we have a new class so we might want to introduce new fields, methods, etc. As stated above
you can just write a code which uses not existing method and then press Alt+Enter and your IDE
will guide you, so you can go check it out, but in this section I’d like to focus on &lt;strong&gt;refactoring
superpowers.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;extracting-variable&quot;&gt;Extracting variable&lt;/h3&gt;

&lt;p&gt;Remember a point about &lt;strong&gt;self-commenting variables&lt;/strong&gt; from previous posts? So here’s the simplest way to achieve that! There’s a magical shortcut: Ctrl+Alt+V, just select a code fragment you want
to extract and press it, type your intuitive variable name and you’re done.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/idea/4.png&quot; alt=&quot;Variable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/idea/5.png&quot; alt=&quot;Variable2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you get the idea of extracting things, so you should definitely test variations of this shortcut like: Ctrl+Alt+F (new field), Ctrl+Alt+C (new constant), Ctrl+Alt+P (new parameter).
I don’t want to describe everything here, I’m just teasing/inspiring you ;)&lt;/p&gt;

&lt;p&gt;Apart from variety of variables you can also extract methods and actually it’s super-effective.
Try selecting bunch of lines you feel that should go to other function, press Ctrl+Alt+M, give
it a proper name (remember, remember, the clean code November) and you have your shiny new function - go drink a coffee, you deserved it!&lt;/p&gt;

&lt;h2 id=&quot;deep-debugging&quot;&gt;Deep debugging&lt;/h2&gt;

&lt;p&gt;I guess you’re pretty tired of all those shortcuts, so this tip won’t be about any keyboard usage. Everyone had a chance to debug something, jumping between lines of code, inserting breakpoints, etc. You probably wonder - what can be improved in that? Well what if I tell you
that you can delete the last execution frame a.k.a. go back in time to the point before function call? Look at the pictures below.&lt;/p&gt;

&lt;p&gt;Here you are inside a function, and you for example went one line too far and want to start again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/idea/6.png&quot; alt=&quot;Debugging&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the Debug window you can select last frame, right click it and drop it. Boooom you’re in main function before calling setNewField method.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/idea/7.png&quot; alt=&quot;Debugging1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This post might seem to be a little short, but I hope that I inspired you to move on and play around with things I showed you. There’s still much to learn my young padawan and for sure I’ll write more about utilising programmers’ tools to improve performance :)&lt;/p&gt;

&lt;p&gt;Do you have any thrilling feature that I’ve missed and is a real time-saver for nerdy geeks like
us? Share it in the comments or let me know! :) We all love shiny tips and tricks.&lt;/p&gt;

&lt;p&gt;See you later!&lt;/p&gt;
</description>
        
        <pubDate>Mon, 18 Jul 2016 20:10:00 +0200</pubDate>
        <link>
        https://theer108.github.io//productivity-in-intellij</link>
        <guid isPermaLink="true">https://theer108.github.io//productivity-in-intellij</guid>
      </item>
      
    
      
      <item>
        <title>Clean code - Functions - Part 2</title>
        
          <description>&lt;p&gt;Let’s continue our journey through cleaning dusty functions! Today we’ll talk 
about &lt;strong&gt;constructors, side effects, return values and how to be awesome in general&lt;/strong&gt; 
If you haven’t done so, go read &lt;a href=&quot;/clean-code-functions&quot;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 09 Jul 2016 11:10:00 +0200</pubDate>
        <link>
        https://theer108.github.io//clean-code-functions-part2</link>
        <guid isPermaLink="true">https://theer108.github.io//clean-code-functions-part2</guid>
      </item>
      
    
      
      <item>
        <title>Clean code - Functions - Part 1</title>
        
          <description>&lt;p&gt;Functions! Good old functions… Your first thought after hearing “readable code”
was probably functions, methods, etc. In fact you were right. Those little things
dividing our code into reusable blocks are the most crucial when it comes to cleaning
codebase.&lt;/p&gt;

&lt;p&gt;But let’s get back to the beginning - how was it in good old DOS Age? Your application
was simply set of commands with some simple loops, gotos (kill it kill it kill it!), etc.
After that smart people introduced functions to cleverly divide your code to reusable blocks
and enabling you to name them. Now that’s a real thing! - &lt;strong&gt;name them&lt;/strong&gt;. With that in mind
we can move to the first point. To the compilation and beyond!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/goto.png&quot; alt=&quot;GoTo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;proper-naming&quot;&gt;Proper naming&lt;/h2&gt;

&lt;p&gt;As it may seem obvious - think how many times you returned to your own code and wondered
&lt;em&gt;oh snap! What the hell does this ‘check’ do?&lt;/em&gt;. Probably a lot. This is not an easy thing
to come up with a proper name at the beginning, so what I do to help myself in this task
is simply focus on one main thing that function does (by the way - next point shows that 
in fact your methods should do just one task, no more, no less, but we will get to that).&lt;/p&gt;

&lt;p&gt;To illustrate that point let consider code below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isPasswordCorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;correctPassword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPasswordFromDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;correctPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;updateUserSuccessfulLoginTimestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createNewSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registerSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you see function name is completely wrong here! No one could possibly think that
this will create a session for user and register it somewhere. Everyone would be like
&lt;em&gt;:( :( :( I just wanted to check if password is correct :( :( :(&lt;/em&gt;. I admit that this
example looks a bit exaggerated, but actually I spent a loooot of time debugging a bug
that was caused by Wicket sessions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSessionForUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// different user than current one&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invalidateNow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You might think that this code invalidates session for user &lt;em&gt;username&lt;/em&gt;… WROOOOONG!
In fact it extracts session from current thread and invalidates that now. So
user executing this code gets kicked :D Fun!&lt;/p&gt;

&lt;p&gt;So to sum up this point - &lt;strong&gt;take extra time&lt;/strong&gt; after implementing function to &lt;strong&gt;give it
a proper name&lt;/strong&gt;. It won’t cost you much, but you will have a better understanding of what
function does after you implemented it.&lt;/p&gt;

&lt;h2 id=&quot;keep-functions-small&quot;&gt;Keep functions small&lt;/h2&gt;

&lt;p&gt;This point is the most important one - functions should be kept as small as possible
and they should be delegated to do one thing only. You may ask - &lt;em&gt;how is that possible?
My application is more complicated than yours n00b&lt;/em&gt; Let me explain - what I meant was
that you should make your function do one thing at some given abstraction level.
For example if you need to write something to a file, you could do it that way:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This will be a file&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Delimiter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;That was it&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// lala lala lalala&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this case it’s not so bad after all, but consider this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writerToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;openFileAndWriteString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;openFileAndWriteString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writeStringToWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeStringToWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This will be a file&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Delimiter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;That was it&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you have a &lt;strong&gt;beautiful structure&lt;/strong&gt; of functiona &lt;strong&gt;each doing it’s own thing&lt;/strong&gt; and delegating
job further. If you ever wanted to change a business logic of messages in files - you
just change last function, simple as that. You don’t need to distract yourself with
exception handling or whether the file is opened or not, etc.&lt;/p&gt;

&lt;p&gt;Please also notice the way we handled exception above - public method is responsible
for that. It’s a good idea to &lt;strong&gt;extract exception handling to separate method&lt;/strong&gt; obligated
to do that one thing. It just looks clean and is amazingly separated from business logic!&lt;/p&gt;

&lt;p&gt;My solution to that? &lt;strong&gt;Design one big function&lt;/strong&gt; - prototype function lets say - and after it works
more or less the way I want it to, I &lt;strong&gt;divide it to separate functions&lt;/strong&gt;. With modern IDEs it’s
fairly simple - with IntelliJ you just select a bunch of lines and press Ctrl+Alt+M, provide
method name, hit enter and receive bacon!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://vignette3.wikia.nocookie.net/bacon/images/e/e4/Push-button-receive-bacon.png/revision/latest?cb=20110421190452&quot; alt=&quot;Bacon&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I don’t want this post to be too long, so I’ll end with just these two points, but there’s
obviously much more to say about increasing readability of functions. I will mention a few 
more in next post. See you soon!&lt;/p&gt;
</description>
        
        <pubDate>Tue, 05 Jul 2016 20:10:00 +0200</pubDate>
        <link>
        https://theer108.github.io//clean-code-functions</link>
        <guid isPermaLink="true">https://theer108.github.io//clean-code-functions</guid>
      </item>
      
    
      
      <item>
        <title>Clean code - Variables</title>
        
          <description>&lt;p&gt;Keeping your code clean is almost as crucial as implementing features on time.
Do you remember the times you had to deal with old code, that was created in
rush and with huuuuuuuge technical debt? Well number of FPS (see below :P)
was probably high as the sky and what is more you probably end up doing workaround
or another dirty hack to get task done.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/clean-code/wtfs.jpg&quot; alt=&quot;FPS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Good news - it doesn’t have to be that way. I had a chance to read a few books
on maintaining clean code and what I can tell you is that you can improve your
skills in minutes with few simple tricks (no. programmers don’t hate me and I 
don’t want to sell you any pills :P).&lt;/p&gt;

&lt;p&gt;In this post I’ll describe some easy to use tips and tricks when it comes to
variables for crafting better code - they’re really simple and you can start
to use them right away! Trust me… it works!&lt;/p&gt;

&lt;h2 id=&quot;variables-naming&quot;&gt;Variables naming&lt;/h2&gt;

&lt;p&gt;Variables is probably the biggest set of names in your application code. So it’s crucial
to name them properly. You probably never wondered you can improve something here,
but from my experience some simple rules can vastly increase your coding skills.
So let’s get started! :D&lt;/p&gt;

&lt;h3 id=&quot;use-meaning-names-for-variables&quot;&gt;Use meaning names for variables&lt;/h3&gt;

&lt;p&gt;First thing is probably obvious, but &lt;strong&gt;use self-explanatory names&lt;/strong&gt;. What I mean - 
you shouldn’t use variables like &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;var1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o1&lt;/code&gt;. Just look at snippet below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FLAG = 2
def do_something(x):

    y = filter(lambda z: z.flag == FLAG, x)
    z = map(lambda z: z.name, y)

    for e in z:
        print(&quot;Give %s promotion!&quot; % e)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And? Do you have any idea about what does this code suppose to do? You probably had to
focus for a while. But if the author spent a few seconds more on this it could look like
this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GOOD_EMPLOYEE = 2
def do_something(employees):

    good_employees = filter(lambda emp: emp.flag == GOOD_EMPLOYEE, employees)
    good_employees_names = map(lambda emp: emp.name, good_employees)

    for good_employee_name in good_employees_names
        print(&quot;Give %s promotion!&quot; % good_employee_name)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With just few changes in variable naming we came to the code that is easy to understand.
&lt;strong&gt;Always give variable name describing its content!&lt;/strong&gt; There are some exceptions - as you
saw in lambdas above or in some cases in loops, but if you ever catch yourself wondering
what does this &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; means - &lt;strong&gt;change it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Friend of mine once told me a golden rule for 
variable naming - &lt;strong&gt;The bigger scope of variable is, the more descriptive the name should
be&lt;/strong&gt;. So in case of variables in lambdas or one-line loops - you might consider names like &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, etc. but for function local variables or fields you should use really intuitive names.&lt;/p&gt;

&lt;h3 id=&quot;useless-variables-wait-what&quot;&gt;Useless variables. Wait what!?&lt;/h3&gt;

&lt;p&gt;That one really improved my coding skills by far. Simply &lt;strong&gt;split complex expressions&lt;/strong&gt; 
introducing new variables. Let’s consider again snippet from above. One could write it
like that (pardon line length):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GOOD_EMPLOYEE = 2
def do_something(employees):
    map(lambda s: print (&quot;Give %s promotion!&quot; % s), 
        map(lambda e: e.name, 
            filter(lambda e: e.flag == GOOD_EMPLOYEE, employees)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Really, really unreadible. We all know keeping Python code neat is a good thing, but
not to the point where code is hardly understandable (Personally I could live with such
code, but only after changing function name to describe what the function does - we
will get to that).&lt;/p&gt;

&lt;p&gt;I would suggest introducing variables for each part of expressions so as to understand
what they mean. Let’s again look at “good” code from above:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GOOD_EMPLOYEE = 2
def do_something(employees):

    good_employees = filter(lambda emp: emp.flag == GOOD_EMPLOYEE, employees)
    good_employees_names = map(lambda emp: emp.name, good_employees)

    for good_employee_name in good_employees_names
        print(&quot;Give %s promotion!&quot; % good_employee_name)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At glance you can understand that we filter all employess to get good employees,
after that we get list with their names and finally we print message to the user.
Simple as that!&lt;/p&gt;

&lt;h2 id=&quot;units&quot;&gt;Units!&lt;/h2&gt;

&lt;p&gt;This point is short but crucial. If you ever encounter variable with particular unit,
for example uptime of your application in milliseconds - &lt;strong&gt;use unit in variable name&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Look at this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;long time;
int purchaseAge;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Can you tell if you can add 5 days to &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt; or 4 years to &lt;code class=&quot;highlighter-rouge&quot;&gt;purchaseAge&lt;/code&gt;? Probably not…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;long timeMilliseconds;
int purchaseAgeDays;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And now you can! You don’t have to scan different parts of projects to know what to expect.
You just know that first variables hold milliseconds and second contains number of days.&lt;/p&gt;

&lt;h2 id=&quot;dont-use-tricky-names&quot;&gt;Don’t use tricky names&lt;/h2&gt;

&lt;p&gt;If you use simple names it’s easier for anyone to remember, understand and pronounce variables.
Code looks more like a poetic masterpiece than a code. It’s easier to get grasp of &lt;code class=&quot;highlighter-rouge&quot;&gt;employeeCount&lt;/code&gt;, 
&lt;code class=&quot;highlighter-rouge&quot;&gt;internalState&lt;/code&gt; than &lt;code class=&quot;highlighter-rouge&quot;&gt;emplCnt&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;intrinsicStt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I had an opportunity to work with some scientists on their code and trust me, this point is not so
obvious for everyone :) In every line there were variables like d_hwhx, d_tauprhx, etc. Total nightmare.
So the point is to use &lt;strong&gt;simple, commonly understandable phrases&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;That’s all for this post - it’s just the beginning, so stay tuned and I hope those simple rules 
will enchance your coding skills. I know for most of you they are obvious, but more advanced 
things are yet to come :D See you soon!&lt;/p&gt;
</description>
        
        <pubDate>Sun, 03 Jul 2016 12:18:00 +0200</pubDate>
        <link>
        https://theer108.github.io//clean-code</link>
        <guid isPermaLink="true">https://theer108.github.io//clean-code</guid>
      </item>
      
    
  </channel>
</rss>
